"""
rag_query_engine.py

RAG-powered Support Ticket Assistant using:
- ChromaDB vector store
- SentenceTransformer embeddings
- Gemini API (2.5 Flash model)

Features:
- Retrieves top-k similar tickets
- Generates step-by-step solution via Gemini
- Loads API key from .env
"""

import chromadb
from sentence_transformers import SentenceTransformer
import google.generativeai as genai
from dotenv import load_dotenv
import os

# -------------------------------
# 0Ô∏è‚É£ Load environment variables
# -------------------------------
load_dotenv()  # loads variables from .env
gemini_api_key = os.getenv("GEMINI_API_KEY")
if not gemini_api_key:
    raise ValueError("GEMINI_API_KEY not found in .env file!")

# -------------------------------
# 1Ô∏è‚É£ Configure Gemini API
# -------------------------------
genai.configure(api_key=gemini_api_key)

# -------------------------------
# 2Ô∏è‚É£ Initialize ChromaDB & embedding model
# -------------------------------
client = chromadb.PersistentClient(path="vector_store")
collection = client.get_or_create_collection("support_tickets")

embed_model = SentenceTransformer('all-MiniLM-L6-v2')

# -------------------------------
# 3Ô∏è‚É£ Function to query RAG
# -------------------------------
def rag_query(user_question, top_k=5, model_name="gemini-2.5-flash"):
    """
    Retrieves top-k similar tickets from ChromaDB and generates answer using Gemini API.
    
    Arguments:
    - user_question: str
    - top_k: int, number of tickets to retrieve
    - model_name: str, Gemini model to use
    
    Returns:
    - answer: str, generated by Gemini
    - retrieved_tickets: list of str
    """
    # Embed user query
    query_embedding = embed_model.encode([user_question])[0]

    # Retrieve top-k tickets from ChromaDB
    results = collection.query(
        query_embeddings=[query_embedding],
        n_results=top_k
    )

    # Combine retrieved texts as context
    context = "\n".join(results['documents'][0]) if results['documents'] else ""

    # Build prompt for Gemini
    prompt = f"""
You are a helpful technical support assistant.
User asked: {user_question}

Here are similar past tickets:
{context}

Provide a concise, step-by-step solution.
"""

    # Call Gemini API
    response = genai.GenerativeModel(model_name).generate_content(prompt)
    return response.text, results['documents'][0] if results['documents'] else []

# -------------------------------
# 4Ô∏è‚É£ Test RAG
# -------------------------------
if __name__ == "__main__":
    print("üí° Example: Type your support question below")
    query = input("Enter your support question: ")
    answer, retrieved_tickets = rag_query(query)
    print("\nüí¨ Suggested Solution:\n", answer)
    print("\nüìÇ Retrieved Tickets:")
    for t in retrieved_tickets:
        print("-", t)
